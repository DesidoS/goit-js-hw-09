{"mappings":"gfAAAA,EAAA,SAEA,IAAMC,EAAoBC,SAASC,cAAc,SAC3CC,EAAmBF,SAASC,cAAc,UAC1CE,EAAO,GACTC,EAAa,KACbC,EAAW,KAEfN,EAAkBO,iBAAiB,UAOnC,SAAkBC,GAChBL,EAAiBM,UAAW,EAE5BD,EAAEE,iBAKFL,EAAaM,YAAYC,EAAYR,EAAKS,SAd5Cb,EAAkBO,iBAAiB,SAEnC,SAAiBC,GACfJ,EAAKI,EAAEM,OAAOC,MAAQP,EAAEM,OAAOE,SAcjC,IAAMJ,EAAa,WACjB,IAAMK,EAAQb,EAAKc,MACnB,GAAIZ,IAAaa,OAAOC,SAAShB,EAAKiB,QAGpC,OAFAC,cAAcjB,QACdF,EAAiBM,UAAW,GAG9BH,GAAY,EAGI,IAAIiB,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQM,QAAQC,IAAI,uBAAwCC,OAAf1B,EAAS,QAAiB0B,OAAX5B,EAAKc,MAAM,QAGvEO,EAAOK,QAAQC,IAAI,sBAAuCC,OAAf1B,EAAS,QAAiB0B,OAAX5B,EAAKc,MAAM,UAEtED,MAKJgB,MAAK,WAEFH,QAAMC,IAAI,uBAAwCC,OAAf1B,EAAS,QAAiB0B,OAAX5B,EAAKc,MAAM,UAGhEgB,OAAM,WAEHJ,QAAMC,IAAI,sBAAuCC,OAAf1B,EAAS,QAAiB0B,OAAX5B,EAAKc,MAAM,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst createPromiseForm = document.querySelector('.form');\nconst createPromiseBtn = document.querySelector('button');\nconst data = {};\nlet intervalId = null;\nlet position = null;\n\ncreatePromiseForm.addEventListener('submit', onSubmit);\ncreatePromiseForm.addEventListener('input', onInput);\n\nfunction onInput(e) {\n  data[e.target.name] = e.target.value\n}\n\nfunction onSubmit(e) {\n  createPromiseBtn.disabled = true\n\n  e.preventDefault();\n  startInterval()\n}\n\nfunction startInterval() {\n  intervalId = setInterval(makePromis, data.step);\n}\n\nconst makePromis = () => {\n  const DELEY = data.delay\n  if (position === Number.parseInt(data.amount)) {\n    clearInterval(intervalId)\n    createPromiseBtn.disabled = false\n    return;\n  }\n  position += 1;\n  \n  \n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(console.log(`✅ Fulfilled promise ${position} in ${data.delay}ms`))\n      } else {\n        // Reject\n        reject(console.log(`❌ Rejected promise ${position} in ${data.delay}ms`))\n      }\n    }, DELEY)\n    // return data\n  });\n  \n  promise\n  .then(() => {\n    // Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${data.delay}ms`);\n    \n  })\n  .catch(() => {\n    // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${data.delay}ms`);\n    \n  });\n};\n\n\n\n\n\n\n\n\n\n\n// function onSubmit(e) {\n//   createPromiseBtn.disabled = true\n\n//   e.preventDefault();\n//   createFirstPromise()\n// }\n\n// function createFirstPromise() {\n//   setTimeout(startInterval, data.delay)\n//   delay += Number.parseInt(data.delay)\n// }\n\n// function startInterval() {\n//   intervalId = setInterval(startFn, data.step);  \n// }\n\n// function startFn() {\n//   counter += 1;\n\n//   createPromise(counter, delay)\n//   delay+=Number.parseInt(data.step)\n  \n//   if (counter === Number.parseInt(data.amount)) {\n//     clearInterval(intervalId)\n//     createPromiseBtn.disabled = false\n//     return;\n//   }\n// }\n\n// function createPromise(position, delay) {\n\n//   const promise = new Promise((resolve, reject) => {\n  \n//   const shouldResolve = Math.random() > 0.3;\n\n//   // setTimeout(() => {\n//     if (shouldResolve) {\n//       // resolve(Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n//       resolve(console.log(`✅ Fulfilled promise ${position} in ${delay}ms`));\n//     }\n//     // reject(Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n//     reject(console.log(`❌ Rejected promise ${position} in ${delay}ms`));\n//     });\n//   // })\n//   return promise;\n// }\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$createPromiseForm","document","querySelector","$ce04d3a99e08e73b$var$createPromiseBtn","$ce04d3a99e08e73b$var$data","$ce04d3a99e08e73b$var$intervalId","$ce04d3a99e08e73b$var$position","addEventListener","e","disabled","preventDefault","setInterval","$ce04d3a99e08e73b$var$makePromis","step","target","name","value","DELEY","delay","Number","parseInt","amount","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","concat","then","catch"],"version":3,"file":"03-promises.64827d4d.js.map"}